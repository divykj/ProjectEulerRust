var searchIndex = JSON.parse('{\
"project_euler":{"doc":"","i":[[0,"problem_0001","project_euler","Multiples of 3 and 5",null,null],[5,"solve","project_euler::problem_0001","",null,[[]]],[5,"sum_of_multiples_of_3_and_5","","",null,[[]]],[0,"problem_0002","project_euler","Even Fibonacci numbers",null,null],[5,"solve","project_euler::problem_0002","",null,[[]]],[5,"sum_of_even_fibonacci_numbers","","",null,[[]]],[0,"problem_0003","project_euler","Largest prime factor",null,null],[5,"solve","project_euler::problem_0003","",null,[[]]],[5,"largest_prime_factor","","",null,[[]]],[0,"problem_0004","project_euler","Largest palindrome product",null,null],[5,"solve","project_euler::problem_0004","",null,[[]]],[5,"largest_palindrome_product","","",null,[[]]],[5,"is_palindrome","","",null,[[]]],[0,"problem_0005","project_euler","Smallest multiple",null,null],[5,"solve","project_euler::problem_0005","",null,[[]]],[5,"smallest_multiple","","",null,[[]]],[5,"get_factor_map","","",null,[[],["hashmap",3]]],[5,"combine_factor_maps","","",null,[[["hashmap",3]],["hashmap",3]]],[0,"problem_0006","project_euler","Sum square difference",null,null],[5,"solve","project_euler::problem_0006","",null,[[]]],[5,"difference_of_sums_squared_and_squared_sums","","",null,[[]]],[5,"sum_of_natural_numbers","","",null,[[]]],[5,"sum_of_squared_natural_numbers","","",null,[[]]],[0,"problem_0007","project_euler","10001st prime",null,null],[5,"solve","project_euler::problem_0007","",null,[[]]],[5,"nth_prime","","",null,[[]]],[0,"problem_0008","project_euler","Largest product in a series",null,null],[5,"solve","project_euler::problem_0008","",null,[[]]],[5,"largest_product_of_adjacent_digits","","",null,[[]]],[0,"problem_0009","project_euler","Special Pythagorean triplet",null,null],[5,"solve","project_euler::problem_0009","",null,[[]]],[5,"product_of_pythgorean_triplet_with_sum","","",null,[[]]],[0,"problem_0010","project_euler","Summation of primes",null,null],[5,"solve","project_euler::problem_0010","",null,[[]]],[5,"sum_of_primes","","",null,[[]]],[0,"problem_0011","project_euler","Largest product in a grid",null,null],[5,"solve","project_euler::problem_0011","",null,[[]]],[5,"get_indices_product","","",null,[[["vec",3]]]],[5,"largest_product_in_grid","","",null,[[]]],[0,"problem_0012","project_euler","Highly divisible triangular number",null,null],[5,"solve","project_euler::problem_0012","",null,[[]]],[5,"get_n_factors","","",null,[[]]],[5,"first_triangular_number_with_over_n_factors","","",null,[[]]],[0,"problem_0013","project_euler","Large sum",null,null],[5,"solve","project_euler::problem_0013","",null,[[]]],[5,"digits_of_large_sum","","",null,[[]]],[0,"problem_0014","project_euler","Longest Collatz sequence",null,null],[5,"solve","project_euler::problem_0014","",null,[[]]],[5,"get_collatz_length","","",null,[[]]],[5,"longest_collatz_sequence_below","","",null,[[]]],[0,"problem_0015","project_euler","Lattice paths",null,null],[5,"solve","project_euler::problem_0015","",null,[[]]],[5,"number_of_square_lattice_paths","","",null,[[]]],[5,"number_of_lattice_paths","","",null,[[]]],[0,"problem_0016","project_euler","Power digit sum",null,null],[5,"solve","project_euler::problem_0016","",null,[[]]],[5,"sum_of_digits_of_2s_power","","",null,[[]]],[0,"problem_0017","project_euler","Number letter counts",null,null],[5,"solve","project_euler::problem_0017","",null,[[]]],[5,"get_number_letter_counts","","",null,[[]]],[5,"get_ordered_number_letter_counts","","",null,[[]]],[5,"number_letter_counts_upto","","",null,[[]]],[5,"solve_problem","project_euler","",null,[[]]],[4,"ProjectEulerCli","","",null,null],[13,"Open","","",0,null],[12,"problem","project_euler::ProjectEulerCli","",1,null],[13,"Solve","project_euler","",0,null],[12,"problem","project_euler::ProjectEulerCli","",2,null],[5,"copy_to_clipboard","project_euler","",null,[[["string",3]]]],[14,"include_problems","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_subcommand","","",0,[[],["option",4]]],[11,"is_subcommand","","",0,[[]]]],"p":[[4,"ProjectEulerCli"],[13,"Open"],[13,"Solve"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);